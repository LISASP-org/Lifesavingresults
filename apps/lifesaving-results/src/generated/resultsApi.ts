/**
 * Generated by orval v6.12.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import { customInstance } from '../auth/apiClient';
export type SwimmerSex = (typeof SwimmerSex)[keyof typeof SwimmerSex];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SwimmerSex = {
  Female: 'Female',
  Male: 'Male',
  Unknown: 'Unknown',
} as const;

export interface Swimmer {
  startNumber: string;
  firstName: string;
  lastName: string;
  sex: SwimmerSex;
  yearOfBirth: number;
}

export interface Start {
  heat: string;
  lane: string;
}

export type PenaltyType = (typeof PenaltyType)[keyof typeof PenaltyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PenaltyType = {
  DidNotStart: 'DidNotStart',
  DidNotFinish: 'DidNotFinish',
  Disqualified: 'Disqualified',
  Points: 'Points',
  None: 'None',
} as const;

export interface Penalty {
  name: string;
  type: PenaltyType;
  points: number;
}

export interface EntryDto {
  id?: string;
  version?: number;
  number?: string;
  name?: string;
  club?: string;
  nationality?: string;
  timeInMillis?: number;
  placeInHeat?: number;
  penalties?: Penalty[];
  swimmer?: Swimmer[];
  start?: Start;
}

export interface Round {
  round: string;
  isFinal: boolean;
}

export type EventDtoInputValueType =
  (typeof EventDtoInputValueType)[keyof typeof EventDtoInputValueType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventDtoInputValueType = {
  Time: 'Time',
  Rank: 'Rank',
} as const;

export type EventDtoGender = (typeof EventDtoGender)[keyof typeof EventDtoGender];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventDtoGender = {
  Female: 'Female',
  Male: 'Male',
  Mixed: 'Mixed',
  Unknown: 'Unknown',
} as const;

export type EventDtoEventType =
  (typeof EventDtoEventType)[keyof typeof EventDtoEventType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventDtoEventType = {
  Individual: 'Individual',
  Team: 'Team',
} as const;

export interface EventDto {
  id?: string;
  version?: number;
  agegroup?: string;
  eventType?: EventDtoEventType;
  gender?: EventDtoGender;
  discipline?: string;
  round?: Round;
  inputValueType?: EventDtoInputValueType;
}

export interface CompetitionDto {
  id?: string;
  version?: number;
  uploadId?: string;
  name?: string;
  acronym?: string;
  from?: string;
  till?: string;
}

export interface CompetitionCreated {
  id?: string;
}

export interface CreateCompetition {
  name?: string;
  acronym?: string;
  from?: string;
  till?: string;
}

// eslint-disable-next-line
type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P
) => any
  ? P
  : never;

export const importFromJAuswertung = (
  uploadId: string,
  importFromJAuswertungBody: string,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<void>(
    {
      url: `/api/import/${uploadId}/jauswertung`,
      method: 'put',
      headers: { 'Content-Type': 'application/json' },
      data: importFromJAuswertungBody,
    },
    options
  );
};

export type ImportFromJAuswertungMutationResult = NonNullable<
  Awaited<ReturnType<typeof importFromJAuswertung>>
>;
export type ImportFromJAuswertungMutationBody = string;
export type ImportFromJAuswertungMutationError = unknown;

export const useImportFromJAuswertung = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof importFromJAuswertung>>,
    TError,
    { uploadId: string; data: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof importFromJAuswertung>>,
    { uploadId: string; data: string }
  > = (props) => {
    const { uploadId, data } = props ?? {};

    return importFromJAuswertung(uploadId, data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof importFromJAuswertung>>,
    TError,
    { uploadId: string; data: string },
    TContext
  >(mutationFn, mutationOptions);
};

export const findCompetitions = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CompetitionDto[]>(
    { url: `/api/competition`, method: 'get', signal },
    options
  );
};

export const getFindCompetitionsQueryKey = () => [`/api/competition`];

export type FindCompetitionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findCompetitions>>
>;
export type FindCompetitionsQueryError = unknown;

export const useFindCompetitions = <
  TData = Awaited<ReturnType<typeof findCompetitions>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof findCompetitions>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getFindCompetitionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findCompetitions>>> = ({
    signal,
  }) => findCompetitions(requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof findCompetitions>>, TError, TData>({
    queryKey,
    queryFn,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const createCompetition = (
  createCompetition: CreateCompetition,
  options?: SecondParameter<typeof customInstance>
) => {
  return customInstance<CompetitionCreated>(
    {
      url: `/api/competition`,
      method: 'post',
      headers: { 'Content-Type': 'application/json' },
      data: createCompetition,
    },
    options
  );
};

export type CreateCompetitionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCompetition>>
>;
export type CreateCompetitionMutationBody = CreateCompetition;
export type CreateCompetitionMutationError = unknown;

export const useCreateCompetition = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCompetition>>,
    TError,
    { data: CreateCompetition },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCompetition>>,
    { data: CreateCompetition }
  > = (props) => {
    const { data } = props ?? {};

    return createCompetition(data, requestOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof createCompetition>>,
    TError,
    { data: CreateCompetition },
    TContext
  >(mutationFn, mutationOptions);
};

export const getCompetitionById = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<CompetitionDto>(
    { url: `/api/competition/${id}`, method: 'get', signal },
    options
  );
};

export const getGetCompetitionByIdQueryKey = (id: string) => [`/api/competition/${id}`];

export type GetCompetitionByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCompetitionById>>
>;
export type GetCompetitionByIdQueryError = unknown;

export const useGetCompetitionById = <
  TData = Awaited<ReturnType<typeof getCompetitionById>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getCompetitionById>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCompetitionByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCompetitionById>>> = ({
    signal,
  }) => getCompetitionById(id, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof getCompetitionById>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const findEventsByCompetitionId = (
  competitionId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<EventDto[]>(
    { url: `/api/competition/${competitionId}/event`, method: 'get', signal },
    options
  );
};

export const getFindEventsByCompetitionIdQueryKey = (competitionId: string) => [
  `/api/competition/${competitionId}/event`,
];

export type FindEventsByCompetitionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof findEventsByCompetitionId>>
>;
export type FindEventsByCompetitionIdQueryError = unknown;

export const useFindEventsByCompetitionId = <
  TData = Awaited<ReturnType<typeof findEventsByCompetitionId>>,
  TError = unknown
>(
  competitionId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findEventsByCompetitionId>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindEventsByCompetitionIdQueryKey(competitionId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findEventsByCompetitionId>>> = ({
    signal,
  }) => findEventsByCompetitionId(competitionId, requestOptions, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof findEventsByCompetitionId>>,
    TError,
    TData
  >({ queryKey, queryFn, enabled: !!competitionId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const findEntriesByEvent = (
  competitionId: string,
  eventId: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal
) => {
  return customInstance<EntryDto[]>(
    {
      url: `/api/competition/${competitionId}/event/${eventId}/entry`,
      method: 'get',
      signal,
    },
    options
  );
};

export const getFindEntriesByEventQueryKey = (competitionId: string, eventId: string) => [
  `/api/competition/${competitionId}/event/${eventId}/entry`,
];

export type FindEntriesByEventQueryResult = NonNullable<
  Awaited<ReturnType<typeof findEntriesByEvent>>
>;
export type FindEntriesByEventQueryError = unknown;

export const useFindEntriesByEvent = <
  TData = Awaited<ReturnType<typeof findEntriesByEvent>>,
  TError = unknown
>(
  competitionId: string,
  eventId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof findEntriesByEvent>>,
      TError,
      TData
    >;
    request?: SecondParameter<typeof customInstance>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindEntriesByEventQueryKey(competitionId, eventId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findEntriesByEvent>>> = ({
    signal,
  }) => findEntriesByEvent(competitionId, eventId, requestOptions, signal);

  const query = useQuery<Awaited<ReturnType<typeof findEntriesByEvent>>, TError, TData>({
    queryKey,
    queryFn,
    enabled: !!(competitionId && eventId),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
